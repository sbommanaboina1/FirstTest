namespace Int
{
    public interface IAccessGroupTypeAppFrameworkContextWrapper
    {
        AccessGroupTypeId GetAccessGroupType();
    }
}


[TestClass]
	public class ReviewControllerTests : UnitTestsFor<ReviewController>
	{
		[TestInitialize]
		public void SetUp()
		{
			_controllerActionRetriever = new Mock<IRetrieveControllerAction>();
			Func<AccessGroupTypeId, IRetrieveControllerAction> resolver = accessGroup =>
			{
				_accessGroupIdUsedToRetrieveControllerAction = accessGroup;
				return _controllerActionRetriever.Object;
			};

			Register(resolver);
			InitObjectUnderTest();
		}

		[TestMethod]
		public void ShouldRedirectToOverridenControllerAndAction()
		{
			GivenUserIsPartOfAccessGroup(AccessGroupTypeId.PREMIER);
			GivenAControllerAction("SomeController", "SomeAction");
			WhenAnOrderIsSubmited();
			ThenARedirectOccursFor("SomeController", "SomeAction");
			ThenARedirectWasObtainedForUserInAccessGroup(AccessGroupTypeId.PREMIER);
		}

		[TestMethod]
		public void Should_redirect_to_review_page_if_coupon_cannot_be_redeemed()
		{
			// Arrange
			Guid guid = Guid.NewGuid();
			For<ICartIdProvider>()
				.Setup(c => c.ActiveCartId)
				.Returns(guid.ToString());


			For<ISwitchboard>()
				.Setup(s => s.Execute(It.IsAny<SubmitOrderCommand>()))
				.Throws(new PurchaseException(PurchaseAppEventIdConstants.FailedToRedeemCouponForSubmitOrder));

			var container = FunctionalTestBootstrapper.Configure();
			var current = container.BeginLifetimeScope("httpRequest").Resolve<IEnterpriseSettingsFactory>().GetCartAndCheckoutSettings();
			For<ISettingsResolver<Ecommerce.UI.Settings.CartAndCheckoutSettings.GeneralSettings>>()
					.SetupGet(e => e.Current).Returns(current.GeneralSettings);
			For<ISettingsResolver<Ecommerce.UI.Settings.CartAndCheckoutSettings.GeneralSettings>>()
				.SetupGet(e => e.Current)
				.Returns(current.GeneralSettings);

			// Act
			ActionResult result = ObjectUnderTest.SubmitOrder();

			// Arrange
			result.ShouldBeType<RedirectToRouteResult>();
			RedirectToRouteResult redirectToRouteResult = result as RedirectToRouteResult;
			redirectToRouteResult.RouteValues["Action"].ShouldEqual("Index");
		}

		[TestMethod]
		public void Should_redirect_to_thankyou_page_if_no_active_cartId_exist()
		{
			// Arrange
			Guid guid = Guid.NewGuid();
			For<ICartIdProvider>()
				.Setup(c => c.CartIdInAnyState)
				.Returns(guid.ToString());
			For<IWorkflowNavigator>()
				.Setup(w => w.GetNextState(WorkflowState.Review, WorkflowAction.SubmitOrder))
				.Returns(WorkflowState.ThankYou);

			// Act
			ActionResult result = ObjectUnderTest.SubmitOrder();

			// Assert
			result.ShouldBeType<RedirectToRouteResult>();
			RedirectToRouteResult redirectToRouteResult = result as RedirectToRouteResult;
			redirectToRouteResult.RouteValues["Controller"].ShouldEqual("ThankYou");
			redirectToRouteResult.RouteValues["Action"].ShouldEqual("Index");
		}

		private void ThenARedirectWasObtainedForUserInAccessGroup(AccessGroupTypeId accessGroup)
		{
			_accessGroupIdUsedToRetrieveControllerAction.ShouldEqual(accessGroup);
		}

		private void GivenUserIsPartOfAccessGroup(AccessGroupTypeId accessGroup)
		{
			For<IAccessGroupTypeAppFrameworkContextWrapper>().Setup(x => x.GetAccessGroupType()).Returns(accessGroup);
		}

		private void GivenAControllerAction(string controllerName, string actionName)
		{
			_controllerActionRetriever.Setup(x => x.GetControllerAction()).Returns(new ControllerAction { Action = actionName, Controller = controllerName });
		}

		private void WhenAnOrderIsSubmited()
		{
			_returnedActionResult = ObjectUnderTest.SubmitOrder();
		}

		private void ThenARedirectOccursFor(string controllerName, string actionName)
		{
			_returnedActionResult.ShouldBeType<RedirectToRouteResult>();
			var redirectToRouteResult = (RedirectToRouteResult)_returnedActionResult;
			redirectToRouteResult.RouteValues["Action"].ShouldEqual(actionName);
			redirectToRouteResult.RouteValues["Controller"].ShouldEqual(controllerName);
		}

		private AccessGroupTypeId _accessGroupIdUsedToRetrieveControllerAction;
		private ActionResult _returnedActionResult;
		private Mock<IRetrieveControllerAction> _controllerActionRetriever;
	}


===

    public interface IProcessOrderDetail
    {
        OrderDetail ConvertToEquotes(OrderDetail orderdetail, string username);
    }
    public class OrderDetailProcessor : IProcessOrderDetail
    {
        public OrderDetailProcessor(ICheckQuote dsaQuoteChecker, IConvertQuote dsaQuoteConverter, IValidateQuoteNumber quoteNumberValidator)
        {
            _dsaQuoteChecker = dsaQuoteChecker;
            _dsaQuoteConverter = dsaQuoteConverter;
            _quoteNumberValidator = quoteNumberValidator;
        }
        public OrderDetail ConvertToEquotes(OrderDetail orderdetail, string username)
        {
            if (orderdetail == null || string.IsNullOrEmpty(username))
                return orderdetail;

	        string matchedQuoteValue;
            orderdetail.BaseItemDetail.SupplierPartNum.PartNum.PartID = _quoteNumberValidator.IsValidPartId(orderdetail) ? Convert(orderdetail.BaseItemDetail.SupplierPartNum.PartNum.PartID, username, out matchedQuoteValue) : string.Empty;

			if (_quoteNumberValidator.IsValidItemDescription(orderdetail))
			{
				string convertedQuote = Convert(orderdetail.BaseItemDetail.ItemDescription, username, out matchedQuoteValue);
				if (!string.IsNullOrEmpty(matchedQuoteValue))
				{
					orderdetail.BaseItemDetail.ItemDescription = orderdetail.BaseItemDetail.ItemDescription.Replace(matchedQuoteValue, convertedQuote);
				}
	        }
			else
			{
				orderdetail.BaseItemDetail.ItemDescription = string.Empty;
			}
            return orderdetail;
        }

        private string Convert(string quoteNumberToParse, string username, out string matchedQuoteValue)
        {
            if (_dsaQuoteChecker.IsDsaQuote(quoteNumberToParse, out matchedQuoteValue) && !string.IsNullOrEmpty(matchedQuoteValue))
            {
				var converetdEquote = _dsaQuoteConverter.ConvertToEquote(matchedQuoteValue.Trim(), username);
                return converetdEquote;
            }
            return quoteNumberToParse;
        }

        private readonly ICheckQuote _dsaQuoteChecker;
        private readonly IConvertQuote _dsaQuoteConverter;
        private readonly IValidateQuoteNumber _quoteNumberValidator;
    }

 [TestClass]
    public class OrderDetailProcessorTests
    {
        [TestInitialize]
        public void Initialize()
        {
            _orderDetailProcessor = new OrderDetailProcessor(_quotechecker.Object,_quoteConverter.Object,_quoteNumberValidator.Object);
        }
        
		[TestMethod]
        public void ShouldReturnSameOrderDetailGivenNullOrderDetail()
        {
            GivenNullOrderDetail();
            GivenUserName(_username);
            WhenOrderGroupProcessed();
            ThenShouldReturnSameOrderDetail();
        }
        
		[TestMethod]
        public void ShouldReturnSameOrderDetailGivenNullUsername()
        {
            GivenValidOrderDetailWithSameDsaQuoteInTwoPlaces();
            GivenUserName(null);
            WhenOrderGroupProcessed();
            ThenShouldReturnSameOrderDetail();
        }
      
		[TestMethod]
        public void ShouldReturnSameOrderDetailGivenNonDsaQuotesInTwoPlaces()
        {
            GivenNonDsaQuotesInTwoPlaces();
            GivenUserName(_username);
            WhenOrderGroupProcessed();
            ThenShouldReturnSameOrderDetail();
        }

		[TestMethod]
		public void ShouldReturnSameOrderDetailGivenEmptyUsername()
		{
			GivenValidOrderDetailWithSameDsaQuoteInTwoPlaces();
			GivenUserName(string.Empty);
			WhenOrderGroupProcessed();
			ThenShouldReturnSameOrderDetail();
		}

		[TestMethod]
		public void ShouldReturnSameOrderDetailGivenWhiteSpaceUsername()
		{
			GivenValidOrderDetailWithSameDsaQuoteInTwoPlaces();
			GivenUserName(" ");
			WhenOrderGroupProcessed();
			ThenShouldReturnSameOrderDetail();
		}

		[TestMethod]
        public void ShouldReturnSameOrderDetailGivenSameDsaQuotesInTwoPlaces()
        {
            GivenValidOrderDetailWithSameDsaQuoteInTwoPlaces();
            GivenCheckedQuoteAsValidDsaQuote();
            GivenConvertedEquote();
            GivenUserName(_username);
            WhenOrderGroupProcessed();
            ThenShouldReturnOrderDetailWithConvertedEquotes();
        }

        [TestMethod]
        public void ShouldReturnSameOrderDetailGivenDsaQuotesInItemDescription()
        {
			GivenDsaQuotesInItemDescription(_dsaQuote1);
            GivenCheckedQuoteAsValidDsaQuote();
            GivenConvertedEquote();
            GivenUserName(_username);
            WhenOrderGroupProcessed();
            ThenShouldReturnOrderDetailWithConvertedEquotesInItemDescription();
        }

		[TestMethod]
		public void ShouldReturnSameOrderDetailGivenDsaQuotesInPartIdWithWhitespaceInterspersedInQuote()
		{
			GivenDsaQuotesInPartId(_dsaQuoteInterspersedWithWhitespace);
			GivenCheckedQuoteAsDsaQuoteWithInterspersedWhitespace();
			GivenUserName(_username);
			WhenOrderGroupProcessed();
			ThenShouldReturnSameOrderDetail();
		}

		[TestMethod]
		public void ShouldReturnSameOrderDetailGivenDsaQuotesInItemDescriptionWithWhitespaceInterspersedInQuote()
		{
			GivenDsaQuotesInItemDescription(_dsaQuoteInterspersedWithWhitespace);
			GivenCheckedQuoteAsDsaQuoteWithInterspersedWhitespace();
			GivenUserName(_username);
			WhenOrderGroupProcessed();
			ThenShouldReturnSameOrderDetail();
		}
      
		[TestMethod]
		public void ShouldConvertDsaQuoteToEQuoteGivenDsaQuotesInPartId()
        {
            GivenDsaQuotesInPartId(_dsaQuote1);
            GivenCheckedQuoteAsValidDsaQuote();
            GivenConvertedEquote();
            GivenUserName(_username);
            WhenOrderGroupProcessed();
            ThenShouldReturnOrderDetailWithConvertedEquotesInPartId();
        }

		[TestMethod]
		public void ShouldConvertDsaQuoteToEQuoteGivenDsaQuotesInPartIdWithSurroundingWhitespace()
		{
			GivenDsaQuotesInPartId(" " + _dsaQuote1 + " ");
			GivenCheckedQuoteAsDsaQuoteWithSurroundingWhitespace();
			GivenConvertedEquote();
			GivenUserName(_username);
			WhenOrderGroupProcessed();
			ThenShouldReturnOrderDetailWithConvertedEquotesInPartId();
		}
		
		[TestMethod]
		public void ShouldConvertNaturalLanguageDsaQuoteToEquoteInItemDescription()
		{
			GivenNaturalLanguageDsaQuotesInItemDescription();
//			GivenCheckedQuoteAsValidDsaQuote();
			GivenConvertedEquoteWithNaturalLanguage();
			GivenUserName(_username);
			WhenOrderGroupProcessed();
			ThenShouldReturnOrderDetailWithNaturalLanguageConvertedEquotesInItemDescription();
		}

		[TestMethod]
		public void ShouldConvertFirstDsaQuoteToEquoteInNaturalLanguageWithTwoValidDsaQuotesInItemDescription()
		{
			GivenTwoNaturalLanguageDsaQuotesInItemDescription();
//			GivenCheckedQuoteAsValidDsaQuote();
			GivenConvertedEquoteWithNaturalLanguage();
			GivenUserName(_username);
			WhenOrderGroupProcessed();
			ThenShouldReturnOrderDetailWithFirstDsaQuoteInNaturalLanguageConvertedToEquoteInItemDescription();
		}
		
		private void GivenNullOrderDetail()
        {
            _orderDetail = null;
        }

        private void GivenUserName(string username)
        {
            _username = username;
        }

        private void GivenValidOrderDetailWithSameDsaQuoteInTwoPlaces()
        {
            _orderDetail = new OrderDetail
            {
                BaseItemDetail = new BaseItemDetail
                {
                    ItemDescription = _dsaQuote1,
                    SupplierPartNum = new SupplierPartNum
                    {
                        PartNum = new PartNum
                        {
                            PartID = _dsaQuote1,
                        }
                    }
                }
            };
            _quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(true);
            _quoteNumberValidator.Setup(x => x.IsValidPartId(_orderDetail)).Returns(true);
        }

        private void GivenNonDsaQuotesInTwoPlaces()
        {
            _orderDetail = new OrderDetail
            {
                BaseItemDetail = new BaseItemDetail
                {
                    ItemDescription = "some invalid 123445.4fgh5678865 value",
                    SupplierPartNum = new SupplierPartNum
                    {
                        PartNum = new PartNum
                        {
                            PartID = "556546123456n7890123.1",
                        }
                    }
                }
            };

			_quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(true);
			_quoteNumberValidator.Setup(x => x.IsValidPartId(_orderDetail)).Returns(true);

			string matchedQuoteValue = string.Empty;
			_quotechecker.Setup(x => x.IsDsaQuote("5r565461234567890123.1", out matchedQuoteValue)).Returns(false);
			_quotechecker.Setup(x => x.IsDsaQuote("some invalid 123445.4fgh5678865 value", out matchedQuoteValue)).Returns(false);
		}

        private void GivenDsaQuotesInItemDescription(string quote)
        {
            _orderDetail = new OrderDetail
            {
                BaseItemDetail = new BaseItemDetail
                {
                    ItemDescription = quote,
                }
            };
            _quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(true);
			_quoteNumberValidator.Setup(x => x.IsValidPartId(_orderDetail)).Returns(false);
		}

		private void GivenNaturalLanguageDsaQuotesInItemDescription()
		{
			_orderDetail = new OrderDetail
			{
				BaseItemDetail = new BaseItemDetail
				{
					ItemDescription = _naturalLanguageDsaQuote,
				}
			};
			_quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(true);
			string matchedQuoteValue = _dsaQuote1;
			_quotechecker.Setup(x => x.IsDsaQuote(_naturalLanguageDsaQuote, out matchedQuoteValue)).Returns(true);
		}

		private void GivenTwoNaturalLanguageDsaQuotesInItemDescription()
		{
			_orderDetail = new OrderDetail
			{
				BaseItemDetail = new BaseItemDetail
				{
					ItemDescription = _naturalLanguageMultipleDsaQuotes,
				}
			};
			_quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(true);
			string matchedQuoteValue = _dsaQuote1;
			_quotechecker.Setup(x => x.IsDsaQuote(_naturalLanguageMultipleDsaQuotes, out matchedQuoteValue)).Returns(true);
		}

        private void GivenDsaQuotesInPartId(string quote)
        {
            _orderDetail = new OrderDetail
            {
                BaseItemDetail = new BaseItemDetail
                {
                    SupplierPartNum = new SupplierPartNum
                    {
                        PartNum = new PartNum
                        {
                            PartID = quote
                        }
                    }
                }
            };
            _quoteNumberValidator.Setup(x => x.IsValidPartId(_orderDetail)).Returns(true);
			_quoteNumberValidator.Setup(x => x.IsValidItemDescription(_orderDetail)).Returns(false);
		}
     
        private void GivenCheckedQuoteAsValidDsaQuote()
        {
	        string matchedDsaQuote = _dsaQuote1;
            _quotechecker.Setup(x => x.IsDsaQuote(_dsaQuote1, out matchedDsaQuote)).Returns(true);
        }

		private void GivenCheckedQuoteAsDsaQuoteWithSurroundingWhitespace()
		{
			string matchedQuoteValue = _dsaQuote1;
			_quotechecker.Setup(x => x.IsDsaQuote(" " + _dsaQuote1 + " ", out matchedQuoteValue)).Returns(true);
		}

		private void GivenCheckedQuoteAsDsaQuoteWithInterspersedWhitespace()
		{
			string matchedQuoteValue = string.Empty;
			_quotechecker.Setup(x => x.IsDsaQuote(_dsaQuoteInterspersedWithWhitespace, out matchedQuoteValue)).Returns(false);
		}
        
		private void GivenConvertedEquote()
        {
            _quoteConverter.Setup(x => x.ConvertToEquote(_dsaQuote1, _username)).Returns(_convertedEquote);
        }

		private void GivenConvertedEquoteWithNaturalLanguage()
		{
			_quoteConverter.Setup(x => x.ConvertToEquote(_dsaQuote1, _username)).Returns(_convertedEquote);
		}
		
		private void WhenOrderGroupProcessed()
        {
            _resultOrderDetail = _orderDetailProcessor.ConvertToEquotes(_orderDetail, _username);
        }

        private void ThenShouldReturnSameOrderDetail()
        {
            Assert.AreEqual(_resultOrderDetail, _orderDetail);
        }

        private void ThenShouldReturnOrderDetailWithConvertedEquotes()
        {
            Assert.IsTrue(ValidateOutput());
        }

		private void ThenShouldReturnOrderDetailWithConvertedEquotesInItemDescription()
        {
            Assert.IsTrue(ValidateOutputItemDescription());
        }
        
		private void ThenShouldReturnOrderDetailWithConvertedEquotesInPartId()
        {
            Assert.IsTrue(ValidateOutputPartId());
        }

		private void ThenShouldReturnOrderDetailWithNaturalLanguageConvertedEquotesInItemDescription()
		{
			Assert.AreEqual(_naturalLanguageConvertedEQuote, _resultOrderDetail.BaseItemDetail.ItemDescription);
		}

		private void ThenShouldReturnOrderDetailWithFirstDsaQuoteInNaturalLanguageConvertedToEquoteInItemDescription()
		{
			Assert.AreEqual(_naturalLanguageMultipleDsaQuotesWithFirstDsaQuoteConverted, _resultOrderDetail.BaseItemDetail.ItemDescription);
		}

		private bool ValidateOutput()
        {
            return (ValidateOutputItemDescription() && ValidateOutputPartId());
        }

        private bool ValidateOutputItemDescription()
        {
            return (_resultOrderDetail.BaseItemDetail.ItemDescription.Equals(_convertedEquote));
        }
		
		private bool ValidateOutputPartId()
        {
            return (_resultOrderDetail.BaseItemDetail.SupplierPartNum.PartNum.PartID.Equals(_convertedEquote));
        }
        
		OrderDetailProcessor _orderDetailProcessor;
        readonly Mock<ICheckQuote> _quotechecker = new Mock<ICheckQuote>();
        readonly Mock<IConvertQuote> _quoteConverter = new Mock<IConvertQuote>();
        readonly Mock<IValidateQuoteNumber> _quoteNumberValidator = new Mock<IValidateQuoteNumber>();
        private OrderDetail _orderDetail;
        private OrderDetail _resultOrderDetail;
        private string _username = "username1";
        private const string _dsaQuote1 = "1234567890123.1";
	    private const string _dsaQuoteInterspersedWithWhitespace = "123456 7890123.1";
        private const string _convertedEquote = "EQ:9876543210987";
		private static readonly string _naturalLanguageDsaQuote = "I want to buy " + _dsaQuote1 + " quote";
		private static readonly string _naturalLanguageConvertedEQuote = "I want to buy " + _convertedEquote + " quote";
		private static readonly string _naturalLanguageMultipleDsaQuotes = _naturalLanguageDsaQuote + " and quote 1234567890123.999";
		private static readonly string _naturalLanguageMultipleDsaQuotesWithFirstDsaQuoteConverted = _naturalLanguageConvertedEQuote + " and quote 1234567890123.999";
    }